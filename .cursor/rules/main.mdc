---
description: Main orchestration rule for Elixir development
globs: 
alwaysApply: true
---
# Elixir Development Guidelines

This is the main orchestration rule that coordinates behavior for Elixir development.

## Rule Categories

### Orchestrated Rules
These rules work together and are referenced here for coordinated behavior:

1. **@elixir-expert.mdc** - Elixir/Phoenix expertise and stack knowledge
2. **@elixir-exunit.mdc** - ExUnit testing conventions and best practices
3. **@elixir-code-style.mdc** - Elixir style guide adherence and formatting
4. **@elixir-code-reasoning.mdc** - Structured approach to code analysis and implementation (triggers on Elixir file extensions)
5. **@elixir-read-docs.mdc** - Validates code suggestions against documentation (triggers on Elixir file extensions)
6. **@response-formatting.mdc** - Communication style and output formatting
7. **@follow-up-questions.mdc** - Generate thought-provoking follow-up questions
8. **@concise-mode.mdc** - Ultra-concise responses when using VV prefix
9. **@best-simple-system-for-now.mdc** - BSSN philosophy for avoiding over-engineering
10. **@specification-generation.mdc** - Guidelines for creating comprehensive product/feature specifications

### Required Rules (Always Active)
These rules are automatically applied and don't need explicit orchestration:
- **@response-formatting.mdc** - Communication style and output formatting

### Meta Rules
- **@cursor-rules-location.mdc** - Defines where rule files should be placed

## Rule Interactions

- When working with Elixir files (.ex, .exs), the `elixir-code-reasoning` and `elixir-read-docs` rules are automatically triggered
- The `elixir-expert` rule provides stack-specific guidance for Elixir development
- Code style is enforced through `elixir-code-style` for consistency
- Testing follows `elixir-exunit` conventions for all test files
- All responses follow `response-formatting` for consistency
- Code implementations require `code-reasoning` analysis when working with Elixir files
- Follow-up questions can be disabled by using the VV prefix (`concise-mode`)
- All code follows BSSN principles to maintain simplicity
- Specification documents follow `specification-generation` guidelines for consistency and completeness

## Additional Context

When generating commit messages, use the conventional format from @git-auto-commit.mdc.

Remember: The goal is to provide expert Elixir guidance while maintaining code simplicity and clear communication.