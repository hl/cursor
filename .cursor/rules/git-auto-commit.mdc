---
description: Git Auto Commit Rule
globs: 
alwaysApply: false
---
## Description
This rule ensures that after Cursor IDE automatically performs changes from Git commits, the modified files are automatically committed back to Git using the conventional commit format. This maintains a clear and consistent commit history that explains what changes were made and why.

## Rule
After Cursor IDE performs automatic changes:
1. All modified files MUST be automatically committed
2. Commit messages MUST follow the conventional commit format
3. Commit messages MUST include:
   - Type: The type of change (feat, fix, docs, style, refactor, test, chore)
   - Scope: The affected component or area (optional)
   - Description: A clear explanation of what changed
   - Body: Detailed explanation of why the changes were made, which MUST include or be directly derived from the original prompts.
4. The commit message MUST reference the original prompts used to generate the changes

## Implementation
- The Cursor IDE will:
  - Track all files modified by automatic changes
  - Generate a conventional commit message based on the changes
  - Include the original prompts in the commit body
  - Run project tests to ensure all tests pass. If tests fail, the commit will be aborted, and the user will be notified of the failures.
    - **Test Execution:** When running project tests (e.g., `mix test`), the command should be executed directly. Rely on the exit code of the test command to determine success (exit code 0) or failure (non-zero exit code). Avoid piping the test command's output to other commands like `cat` for commands like `mix test` that do not use a pager, as this can introduce instability or mask the true exit code in some environments.
  - Automatically execute the git commit command if tests pass.
  - When automatically executing the `git commit` command, especially for multi-line commit messages (subject and body):
    - **Preferred Method:** To ensure proper formatting and avoid issues with shell interpretation of special characters and newlines, the commit message SHOULD be written to a temporary file (e.g., `.git_commit_msg.tmp`). The commit should then be made using `git commit -F .git_commit_msg.tmp`. The temporary file should be deleted after a successful commit.
    - **Alternative (with caution):** If using `git commit -m "message"`, be aware that complex multi-line messages with quotes and newlines can be easily misinterpreted by the shell when passed directly via the `run_terminal_cmd` tool. Literal `\n` and other escape sequences might appear in the final commit message. This method requires careful escaping and is less reliable for multi-line messages than the `-F <file>` method.
  - Handle any potential merge conflicts or errors (e.g., by aborting the commit and notifying the user).
  - Group related changes across multiple files stemming from a single logical task/original prompt set into one commit.

## Benefits
- Maintains clear and consistent commit history
- Provides traceability between prompts and code changes
- Follows industry-standard commit conventions
- Automates the commit process for better workflow efficiency

## Examples
✅ Correct Commit Message:
```
feat(ide): implement automatic code formatting

- Added automatic formatting for Python files
- Implemented consistent indentation rules
- Added support for line length limits

Changes were generated based on the following prompts:
1. "Format the code according to PEP 8 standards"
2. "Ensure consistent indentation across all files"
```

❌ Incorrect Commit Message:
```
Updated some files

- Made changes to formatting
- Fixed some issues
```

## Conventional Commit Types
- feat: New feature
- fix: Bug fix
- docs: Documentation changes
- style: Code style changes (formatting, etc.)
- refactor: Code refactoring
- test: Adding or modifying tests
- chore: Maintenance tasks 